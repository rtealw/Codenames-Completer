const actualKeys = [];

actualKeys[1] = [
  [1, 1, 2, 2, 0],
  [1, 1, 0, 0, 1],
  [2, 0, 0, 1, 1],
  [2, 3, 0, 2, 2],
  [2, 1, 2, 0, 1]
];

actualKeys[2] = [
  [1, 1, 2, 0, 1],
  [2, 0, 1, 2, 2],
  [0, 2, 2, 1, 0],
  [0, 1, 2, 1, 0],
  [1, 0, 3, 1, 2]
];

actualKeys[3] = [
  [1, 2, 0, 3, 1],
  [2, 0, 1, 0, 2],
  [0, 0, 1, 2, 2],
  [1, 2, 1, 2, 0],
  [1, 0, 1, 1, 2]
];

actualKeys[4] = [
  [0, 2, 0, 2, 0],
  [2, 0, 1, 0, 1],
  [2, 1, 2, 2, 2],
  [1, 2, 1, 0, 1],
  [1, 1, 0, 3, 1]
];

actualKeys[5] = [
  [2, 0, 1, 0, 2],
  [0, 2, 2, 1, 3],
  [2, 0, 1, 1, 2],
  [1, 0, 1, 1, 2],
  [1, 2, 0, 1, 0]
];

actualKeys[6] = [
  [2, 2, 0, 0, 2],
  [1, 1, 2, 1, 0],
  [1, 2, 2, 1, 2],
  [0, 3, 0, 0, 1],
  [1, 0, 1, 2, 1]
];

actualKeys[7] = [
  [0, 0, 2, 1, 1],
  [0, 2, 0, 3, 2],
  [1, 2, 1, 2, 1],
  [0, 0, 1, 2, 2],
  [1, 1, 1, 2, 0]
];

actualKeys[8] = [
  [2, 0, 1, 2, 1],
  [3, 2, 2, 2, 1],
  [0, 1, 1, 0, 1],
  [1, 2, 0, 2, 1],
  [0, 2, 0, 1, 0]
];

actualKeys[9] = [
  [2, 2, 3, 1, 0],
  [2, 1, 2, 1, 2],
  [1, 1, 0, 0, 1],
  [0, 1, 2, 1, 1],
  [2, 0, 0, 0, 2]
];

actualKeys[10] = [
  [0, 2, 1, 0, 2],
  [3, 0, 1, 2, 1],
  [1, 1, 0, 2, 2],
  [1, 1, 2, 1, 0],
  [0, 0, 2, 1, 2]
];

actualKeys[11] = [
  [2, 2, 2, 1, 2],
  [0, 1, 1, 0, 0],
  [0, 3, 2, 1, 0],
  [1, 1, 2, 0, 2],
  [1, 1, 1, 0, 2]
];

actualKeys[12] = [
  [0, 2, 1, 0, 2],
  [1, 0, 0, 1, 1],
  [0, 1, 3, 2, 2],
  [1, 1, 1, 2, 0],
  [2, 2, 0, 2, 1]
];

actualKeys[13] = [
  [1, 0, 2, 1, 3],
  [2, 1, 2, 0, 2],
  [2, 0, 1, 2, 1],
  [1, 1, 0, 0, 1],
  [2, 1, 0, 2, 0]
];

actualKeys[14] = [
  [3, 0, 1, 2, 2],
  [1, 2, 0, 0, 2],
  [1, 0, 2, 1, 1],
  [0, 1, 1, 0, 1],
  [0, 2, 2, 2, 1]
];

actualKeys[15] = [
  [0, 1, 2, 0, 0],
  [0, 2, 2, 2, 1],
  [1, 0, 3, 1, 2],
  [1, 0, 1, 1, 2],
  [1, 2, 2, 0, 1]
];

actualKeys[16] = [
  [1, 2, 0, 2, 1],
  [1, 2, 1, 0, 1],
  [2, 0, 2, 2, 1],
  [0, 2, 3, 0, 1],
  [1, 1, 0, 0, 2]
];

actualKeys[17] = [
  [0, 2, 3, 1, 2],
  [0, 2, 0, 1, 0],
  [1, 2, 1, 2, 1],
  [0, 1, 1, 1, 2],
  [0, 1, 0, 2, 2]
];

actualKeys[18] = [
  [3, 2, 2, 0, 0],
  [2, 2, 2, 1, 1],
  [1, 1, 0, 1, 1],
  [0, 2, 0, 2, 0],
  [0, 1, 1, 2, 1]
];

actualKeys[19] = [
  [0, 1, 2, 0, 2],
  [1, 1, 2, 1, 1],
  [2, 2, 0, 0, 0],
  [2, 0, 3, 1, 2],
  [1, 2, 0, 1, 1]
];

actualKeys[20] = [
  [0, 1, 1, 2, 2],
  [1, 2, 2, 2, 0],
  [0, 0, 1, 0, 2],
  [3, 2, 1, 1, 1],
  [1, 2, 1, 0, 0]
];

actualKeys[21] = [
  [3, 1, 0, 0, 1],
  [0, 2, 1, 0, 2],
  [1, 2, 0, 1, 2],
  [0, 1, 1, 2, 2],
  [2, 1, 2, 1, 0]
];

actualKeys[22] = [
  [1, 2, 1, 0, 3],
  [0, 0, 2, 2, 0],
  [2, 1, 1, 1, 2],
  [2, 0, 2, 0, 1],
  [1, 2, 1, 1, 0]
];

actualKeys[23] = [
  [0, 3, 1, 0, 2],
  [1, 0, 2, 1, 0],
  [2, 1, 2, 1, 2],
  [0, 2, 0, 1, 1],
  [1, 2, 2, 1, 0]
];

actualKeys[24] = [
  [0, 0, 1, 1, 1],
  [0, 2, 2, 2, 0],
  [0, 2, 1, 0, 2],
  [1, 1, 3, 2, 1],
  [1, 1, 0, 2, 2]
];

actualKeys[25] = [
  [0, 1, 2, 0, 2],
  [2, 3, 0, 2, 1],
  [2, 1, 0, 2, 1],
  [1, 1, 2, 2, 1],
  [0, 1, 0, 0, 1]
];

actualKeys[26] = [
  [2, 0, 1, 1, 1],
  [2, 1, 1, 2, 2],
  [0, 2, 0, 1, 3],
  [1, 0, 0, 1, 0],
  [2, 1, 2, 2, 0]
];

actualKeys[27] = [
  [0, 2, 1, 1, 2],
  [0, 1, 2, 0, 1],
  [1, 2, 2, 1, 0],
  [1, 2, 2, 0, 0],
  [0, 1, 3, 2, 1]
];

actualKeys[28] = [
  [2, 1, 0, 0, 2],
  [0, 1, 2, 1, 2],
  [1, 2, 0, 3, 2],
  [1, 1, 1, 0, 1],
  [2, 2, 0, 0, 1]
];

actualKeys[29] = [
  [0, 1, 0, 1, 2],
  [1, 2, 2, 1, 2],
  [0, 2, 3, 0, 0],
  [1, 1, 2, 1, 2],
  [2, 0, 1, 0, 1]
];

actualKeys[30] = [
  [0, 3, 2, 2, 1],
  [2, 1, 0, 1, 0],
  [1, 1, 1, 0, 2],
  [0, 0, 2, 1, 0],
  [1, 2, 2, 1, 2]
];

actualKeys[31] = [
  [2, 1, 2, 1, 0],
  [0, 1, 2, 0, 2],
  [0, 2, 2, 3, 1],
  [2, 0, 1, 0, 1],
  [0, 1, 1, 2, 1]
];

actualKeys[32] = [
  [3, 0, 2, 2, 1],
  [0, 1, 1, 2, 2],
  [0, 0, 2, 0, 1],
  [2, 1, 0, 1, 0],
  [1, 1, 2, 2, 1]
];

actualKeys[33] = [
  [0, 2, 1, 0, 1],
  [2, 1, 0, 2, 1],
  [0, 0, 3, 1, 0],
  [1, 2, 2, 1, 2],
  [2, 2, 1, 0, 1]
];

actualKeys[34] = [
  [2, 1, 1, 1, 2],
  [3, 0, 1, 2, 2],
  [1, 2, 1, 0, 1],
  [2, 0, 0, 0, 2],
  [0, 2, 1, 1, 0]
];

actualKeys[35] = [
  [2, 1, 0, 1, 1],
  [3, 2, 0, 2, 1],
  [1, 0, 0, 1, 0],
  [2, 2, 2, 0, 2],
  [0, 2, 1, 1, 1]
];

actualKeys[36] = [
  [2, 0, 1, 1, 2],
  [0, 2, 1, 2, 0],
  [1, 2, 1, 0, 2],
  [0, 1, 2, 1, 1],
  [0, 3, 1, 0, 2]
];

actualKeys[37] = [
  [1, 2, 0, 1, 1],
  [2, 0, 1, 2, 2],
  [0, 1, 1, 0, 2],
  [2, 3, 0, 0, 2],
  [1, 1, 2, 1, 0]
];

actualKeys[38] = [
  [0, 3, 2, 2, 0],
  [1, 0, 1, 1, 1],
  [2, 0, 2, 2, 2],
  [0, 1, 1, 2, 0],
  [1, 1, 1, 0, 2]
];

actualKeys[39] = [
  [1, 2, 2, 2, 1],
  [0, 2, 1, 1, 1],
  [3, 1, 2, 1, 0],
  [0, 2, 1, 0, 2],
  [2, 0, 0, 1, 0]
];

actualKeys[40] = [
  [1, 0, 2, 2, 2],
  [2, 1, 0, 2, 0],
  [0, 1, 1, 1, 1],
  [1, 3, 0, 0, 2],
  [2, 0, 1, 2, 1]
];

// Fix R indexing
actualKeys.shift();

// Standardize 1 as red and 2 as blue
for (let x = 20; x < 40; x++) {
  const newKey = Array.from(actualKeys[x]);
  for (let i = 0; i < 5; i++) {
    for (let j = 0; j < 5; j++) {
      if (newKey[i][j] === 1) {
        newKey[i][j] = 2;
      } else if (newKey[i][j] === 2) {
        newKey[i][j] = 1;
      }
    }
  }
  actualKeys[x] = newKey;
}

// Get all rotations of keys
const flipMatrix = matrix => {
  return matrix[0].map((column, index) => matrix.map(row => row[index]));
};

const rotateMatrix = matrix => {
  const matrixCopy = Array.from(matrix);
  const rotatedMatrix = flipMatrix(matrixCopy.reverse());
  return rotatedMatrix;
};

const realKeys = [];

for (let x = 0; x < actualKeys.length; x++) {
  let key = actualKeys[x];
  realKeys[4 * x] = key;
  key = rotateMatrix(key);
  realKeys[4 * x + 1] = key;
  key = rotateMatrix(key);
  realKeys[4 * x + 2] = key;
  key = rotateMatrix(key);
  realKeys[4 * x + 3] = key;
}

// Add row and col values to each matrix
const finalKeys = [];

for (let x = 0; x < realKeys.length; x++) {
  const finalKey = [];
  for (let i = 0; i < 5; i++) {
    const finalRow = [];
    for (let j = 0; j < 5; j++) {
      finalRow[j] = {
        colorID: realKeys[x][i][j],
        row: j,
        col: i
      };
    }
    finalKey[i] = finalRow;
  }
  finalKeys[x] = finalKey;
}

const getKeys = () => {
  return finalKeys;
};

export default getKeys;
